<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Light Hybrid 4J</title>
    <link>https://networknt.github.io/light-hybrid-4j/tutorial/</link>
    <description>Recent content in Tutorials on Light Hybrid 4J</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sat, 10 Jun 2017 11:25:01 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/light-hybrid-4j/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Merge Multiple Schemas Tutorial</title>
      <link>https://networknt.github.io/light-hybrid-4j/tutorial/merge-schema/</link>
      <pubDate>Sat, 10 Jun 2017 11:25:01 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-hybrid-4j/tutorial/merge-schema/</guid>
      <description>In this tutorial, we are going to start a server with multiple services. Each service will have its own schema.json and they need to be merge during server startup so that validation and scope verification can be done on all request based on the merged schema.
Prepare Environment Bofore start, we need to prepare the environment by clone several projects from networknt and build them. Let&amp;rsquo;s assume that you are using a workspace called networknt under your user directory.</description>
    </item>
    
    <item>
      <title>Hello World Tutorial</title>
      <link>https://networknt.github.io/light-hybrid-4j/tutorial/helloworld/</link>
      <pubDate>Sat, 10 Jun 2017 09:33:02 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-hybrid-4j/tutorial/helloworld/</guid>
      <description>This is a tutorial to show users how to generate a hybrid server and a hybrid service and put them together to serve request from curl. It leverage the generic server and generic service defined in model-config/hybrid. These server and service are used to test the new version of the light-hybrid-4j and new version of light-codegen.
Prepare Environment Bofore start, we need to prepare the environment by clone several projects from networknt and build them.</description>
    </item>
    
    <item>
      <title>Tutorial</title>
      <link>https://networknt.github.io/light-hybrid-4j/tutorial/</link>
      <pubDate>Thu, 27 Apr 2017 09:38:08 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-hybrid-4j/tutorial/</guid>
      <description>The following tutorials will help users to get started on hybrid service and more will be added later.
 How to generate and initial hybrid microservice project
 How to develop, setup hybrid microservice
 How to run and do integration test for hybrid microservice
 Hello World Example
 Multiple Services Example
  </description>
    </item>
    
    <item>
      <title>Integration Test</title>
      <link>https://networknt.github.io/light-hybrid-4j/tutorial/integration/</link>
      <pubDate>Wed, 12 Oct 2016 17:06:30 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-hybrid-4j/tutorial/integration/</guid>
      <description>Integration Test  Copy hybrid serivce jar files into docker service folder
 Go to light-eventuate-4j root folder, run docker-compose for event store:
  cd light-eventuate-4j docker-compose up
The docker compose will start docker images for eventuate event store: &amp;ndash; zookeeper &amp;ndash;kafka &amp;ndash;mysql
 Run services:  docker-compose -f docker-compose-service.yml up
This command will start command and query side hybrid services
 Test on command side to create and publish events:  Use postmand, set post request:</description>
    </item>
    
    <item>
      <title>Unit Test</title>
      <link>https://networknt.github.io/light-hybrid-4j/tutorial/implementation/</link>
      <pubDate>Wed, 12 Oct 2016 17:05:47 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-hybrid-4j/tutorial/implementation/</guid>
      <description>Implementation service 1 change maven pom file for required dependency. For todo-list eventuate example project, following are required dependencies:
 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;eventuate-common&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;eventuate-client&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;eventuate-todo-common&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.networknt&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;eventuate-todo-command&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;   Implement service handler classes and test classes:  To consist with Restful microservice, Hybrid service use RPC call with Json format input and output. In the handler class, we pass the input object as below:</description>
    </item>
    
    <item>
      <title>Microservices</title>
      <link>https://networknt.github.io/light-hybrid-4j/tutorial/setup/</link>
      <pubDate>Sun, 09 Oct 2016 08:01:56 -0400</pubDate>
      
      <guid>https://networknt.github.io/light-hybrid-4j/tutorial/setup/</guid>
      <description>Introduction Hybrid service is type of service between J2ee service and microservice. It can help some organizations to take step by step to fully adopt microservices. User can split original large project to several Hybrid services to run at same JVM. From consumer side, Hybrid services can be treated as microservices to be use.
Now on the tutorial, we are using light-eventuate-4j&amp;rsquo;s todo-list example to generate and run hybrid service;</description>
    </item>
    
  </channel>
</rss>